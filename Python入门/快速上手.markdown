**初衷: 从最简单的代码开始, 在机甲大师实验, 快速上手Python开发.**

#### 1. 问个好吧

下面`start()`内的一行代码实现了亮灯示意. `#`开头的是注释. 只需关注API中文化之前的部分. 之后的例程也类似.
```python
def start():
    LED灯.开启枪LED()

# 以下为API中文化部分, 与程序逻辑无关. 请勿作修改.

LED灯 = led_ctrl
LED灯.开启枪LED = LED灯.gun_led_on
```
现在只需要知道, 通过`LED灯.开启枪LED()`这样的指令(老话叫"函数")可以操作机甲的不同功能, 今后还会接触更多.

留意行首的缩进使用的是4个空格, 之后例程也是如此.

#### 2. 仰头

来个仰头杀. 下面代码比之前的稍微多了点东西, `()`中的`30`很容易猜到就是上仰的角度. 这是指令的参数, 可以自行调整试验. 根据官方文档, 上限是35度.
```python
def start():
    云台.俯仰(30)

# 以下为API中文化部分, 与程序逻辑无关. 请勿作修改.

云台 = gimbal_ctrl
云台.俯仰 = 云台.pitch_ctrl
```

#### 3. 点头
可以上仰, 也可以下探. 多加了一行代码, 先上后下, 完成一个点头. 以后会不时用到负数.
```python
def start():
    云台.俯仰(30)
    云台.俯仰(-10)

# 以下为API中文化部分, 与程序逻辑无关. 请勿作修改.

云台 = gimbal_ctrl
云台.俯仰 = 云台.pitch_ctrl
```

#### 4. 点两次
点两次头呢? 来个复制黏贴大法, 运行同样指令两次即可~
```python
def start():
    云台.俯仰(30)
    云台.俯仰(-10)
    云台.俯仰(30)
    云台.俯仰(-10)

# 以下为API中文化部分, 与程序逻辑无关. 请勿作修改.

云台 = gimbal_ctrl
云台.俯仰 = 云台.pitch_ctrl
```

#### 5. 点三次
当然, 可以像之前一样再复制黏贴一次, 那就要2*3=6行代码, 看起来虽然整齐, 但未免累赘. 更不用说, 如果需要重复更多次的话, 代码就会越来越冗长.

下面是一个更通用的方法.
```python
def start():
    次数 = 0
    while 次数 < 3:
        云台.俯仰(30)
        云台.俯仰(-10)
        次数 += 1

# 以下为API中文化部分, 与程序逻辑无关. 请勿作修改.

云台 = gimbal_ctrl
云台.俯仰 = 云台.pitch_ctrl
```
望文生义, 一开始的点头次数为0. `次数 = 0`就是将`次数`这个量置为0. `while`是英文"每当, 当...时候"的意思, 也就是看次数是否小于3. 如果是, 就运行下面缩进的部分.

缩进部分中的最后一行等同于`次数 = 次数 + 1`, 也就是将点头次数累加1. 这个`while`结构就完成了3次重复点头. 可以试试将它改成其他次数.

注意Python语言对行首缩进非常敏感.

#### 6. 无限点头
也许上节已经试过, 如果想让它一直点头, 一个简单的办法是设置一个非常大的次数上限, 比如9999999. 当然, 有一个更方便的办法, 就是将`while`的条件设置为"总是对的", 即`True`:
```python
def start():
    次数 = 0
    while True:
        云台.俯仰(30)
        云台.俯仰(-10)
        次数 += 1
        告知(次数)

# 以下为API中文化部分, 与程序逻辑无关. 请勿作修改.

云台 = gimbal_ctrl
云台.俯仰 = 云台.pitch_ctrl

告知 = print
```
注意控制台, 在每次点头后, 是不是出现了每次当前点头的次数(前缀是当前的时刻). 没错, 就是`告知`方法可用于输出某个变量的值, 可以用于实时监控程序运行期间各个变量的变化, 是重要的程序调试手段.

[待续]